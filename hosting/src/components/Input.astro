---
import Loader from './Loader.astro';
import Icon, { IconType, IconSize } from './Icon.astro';

interface Data {
  longLink?: string;
  shortLink?: string;
  isLoading: boolean;
  isCopied: boolean;
  error?: string;
}

function submitForm(data: Data) {
  data.shortLink = '';
  data.error = '';

  if (data.longLink) {
    data.isLoading = true;

    const regex =
      /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/gi;

    if (data.longLink.match(regex)) {
      fetch('/api/short-url', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Accept: 'application/json',
        },
        body: JSON.stringify({
          url: data.longLink,
        }),
      })
        .then(async (result) => {
          const resultJson = await result.json();
          data.shortLink = resultJson.shortLink;
          data.isLoading = false;
        })
        .catch((error) => {
          data.isLoading = false;
          data.error =
            'An unexpected error occurred. Please check your data input!';
        });
    } else {
      data.isLoading = false;
      data.error = 'Your link is invalid format! Must starts with http/https!';
    }
  }
}

function copyShortLink(data: Data) {
  if (data.shortLink) {
    navigator.clipboard.writeText(data.shortLink);
    data.isCopied = true;
  }
}
---

<div
  class='input-container'
  x-data=`{ data: { longLink: '', shortLink: '', isLoading: false, isCopied: false, error: '' }, submitForm: ${submitForm}, copyShortLink: ${copyShortLink}}`
>
  <input
    type='text'
    placeholder='Paste long url here'
    x-model='data.longLink'
    @keyup.enter='submitForm(data)'
  />
  <div class='btn-container'>
    <button class='btn' x-on:click='submitForm(data)'>
      <svg width='180px' height='60px' viewBox='0 0 180 60' class='border'>
        <polyline points='179,1 179,59 1,59 1,1 179,1' class='bg-line'
        ></polyline>
        <polyline points='179,1 179,59 1,59 1,1 179,1' class='hl-line'
        ></polyline>
      </svg>
      <span>GO</span>
    </button>
  </div>
  <div x-show='data.isLoading'>
    <Loader />
  </div>
  <div x-show='!data.isLoading && data.shortLink && !data.error'>
    <Icon type={IconType.Success} />
  </div>
  <div x-show='!data.isLoading && !data.shortLink && data.error'>
    <Icon type={IconType.Warn} />
  </div>
  <div
    class='result-container'
    x-show='!data.isLoading && data.shortLink && !data.error'
  >
    <div>
      <a
        id='shortLink'
        x-text='data.shortLink'
        x-bind:href='data.shortLink'
        target='_blank'></a>
    </div>
    <div class='btn-container'>
      <button class='btn' x-on:click='copyShortLink(data)'>
        <svg width='180px' height='60px' viewBox='0 0 180 60' class='border'>
          <polyline points='179,1 179,59 1,59 1,1 179,1' class='bg-line'
          ></polyline>
          <polyline points='179,1 179,59 1,59 1,1 179,1' class='hl-line'
          ></polyline>
        </svg>
        <span x-show='!data.isCopied'>COPY</span>
        <div class='text' x-show='data.isCopied'>
          <span>Copied!</span>
          <Icon type={IconType.Success} size={IconSize.Small} />
        </div>
      </button>
    </div>
  </div>
  <div
    class='error-container'
    x-show='!data.isLoading && !data.shortLink && data.error'
  >
    <span x-text='data.error'></span>
  </div>
</div>

<style lang='scss'>
  .input-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    padding: 1rem 2rem;
    align-items: center;

    input {
      width: 80vw;
      border-radius: 2px;
      background: #f2f2f2;
      border: 1px solid #f2f2f2;
      color: #757575;
      cursor: default;
      font-size: 1.3rem;
      font-weight: bold;
      padding: 16px;
      height: 36px;
      font-family: 'Fira Code', sans-serif;
    }

    .btn-container {
      margin: 10px 0;
      position: relative;

      .btn {
        width: 180px;
        height: 60px;
        cursor: pointer;
        background: transparent;
        border: 1px solid #91c9ff;
        outline: none;
        transition: 1s ease-in-out;

        svg {
          position: absolute;
          left: 0;
          top: 0;
          fill: none;
          stroke: #fff;
          stroke-dasharray: 150 480;
          stroke-dashoffset: 150;
          transition: 1s ease-in-out;
        }

        &:hover {
          transition: 1s ease-in-out;
          background: #4f95da;

          svg {
            stroke-dashoffset: -480;
          }
        }

        span {
          color: white;
          font-size: 18px;
          font-weight: 100;
          font-family: 'Fira Code', sans-serif;
        }
      }
    }

    .result-container {
      display: flex;
      flex-direction: row;
      align-items: center;

      .btn-container {
        margin-left: 20px;

        .text {
          font-size: var(--font-size-xm);
          display: flex;
          justify-content: center;
          align-items: center;
          height: 40%;

          span {
            margin-left: 20px;
          }
        }
      }
    }
  }
</style>
